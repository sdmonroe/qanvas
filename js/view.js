	var dock;
	var dock_index = 0;
	
	var title_color = "#356AA0"; // "white";
	var view_color = "99ccff";//"#008C00"; //"#3F4C6B";
	
	var gd;
	
	var pinned; // TODO: this var doesn't need to be saved on client side, needs to be server side persisted

	var LABEL_RESULTS = "v";
	var LABEL_ABOUT = "a";
	var LABEL_MATCHES = "m";
	var LABEL_GROUPS = "c";
	var LABEL_PIN = "pin";
	var LABEL_UNPIN = "unpin";
	var LABEL_HIDE = "hide";
	var LABEL_REVERSE_SUFFIX_MATCHES_VIEW = " for... ";
	var LABEL_REVERSE_PREFIX_MATCHES_VIEW = " is ";
	var LABEL_REVERSE_PREFIX = " ... of ";
	var LABEL_MORE_MODULES = "*";
	var LABEL_MAXIMIZE = "^";
	var LABEL_DETACH = "+";
	var LABEL_WHO_TOO = "?";
	var LABEL_FOWARD = ">";
	var LABEL_BACK = "<";
	var LABEL_COLLAPSE_ALL = "-";
	var LABEL_EXPAND_ALL = "+";
	var LABEL_TEXT_SEARCH = "abc";
	var LABEL_TAGS_LIST = "t";
	var LABEL_GRAB_SELECTIONS = "v";
	var LABEL_ACTIONS = "!";
	var LABEL_BOOKMARK = "b";
	var LABEL_FILTER_ON_THESE = "&raquo;";
	var LABEL_ADD_FILTER = "+";

	var link_clicked = false;
	
	var banwidth_hog = true;
	var banwidth_hog2 = true;
	
	

	function setSubject(value, label){
		document.getElementById('s').value = value;
		document.getElementById('sLabel').innerHTML = parseLabel(label);
	}
	function setProperty(value, label){
		document.getElementById('p').value = value;
		document.getElementById('pLabel').innerHTML = parseLabel(label);
	}
	function setValue(value, label){
		if(startsWith(label, "http:")){
			value = DELIMIT_IRI_START + value + DELIMIT_IRI_END;
		}
		document.getElementById('v').value = value;
		document.getElementById('vLabel').innerHTML = label;
	}
		
function loadView(data) {
	//alert("View is loading...");
	if (!dock)
		dock = new OAT.Dock("canvas", 3);
	if(!gd) gd = new OAT.GhostDrag();
	if(jQuery(data).find("error").length > 0){
		jQuery("body").html("<div class=\"error\">Service temporarily down for maintanace. Sorry about any inconvience.</div>");
		return;
	}
	var reload = jQuery(data).find("metadata").attr("reload") == "true";
	var view;
	var offset = jQuery(data).find("metadata").attr("offset");
	var limit = jQuery(data).find("metadata").attr("limit");
	var viewType = jQuery(data).find("metadata").attr("viewType");
	var path = jQuery(data).find("metadata").attr("path");
	var lastNonboundProp = jQuery(data).find("metadata").attr("lnp");
	var lastNonboundPropReversed = jQuery(data).find("metadata").attr("lnpr");
	var targetId = (!jQuery(data).find("metadata").attr("tid")) ? Math.random()+"": jQuery(data).find("metadata").attr("tid");
	var sourceViewId = jQuery(data).find("metadata").attr("smid"); // this will be null if this view wasn't generated by a source view, i.e. if user input path in location bar
	var append = jQuery(data).find("metadata").attr("append"); // implement stream of data?
	var maximize = jQuery(data).find("metadata").attr("maximize"); // make view full screen?
	
	// escape any ' char in the path
	path = path.replace("\'", "&#39;");
	
	// treat IRI literals as resources
	if(startsWith(path, "http:")){
		path = DELIMIT_IRI_START + path + DELIMIT_IRI_END;
	}
	
	// save every path in the history
	doHistory(path);
	
	// loadingScript user that something's happening
	// jQuery doesn't like unescaped dots in the selector, so replace with \\., since we're in quotes, need to do double replace
	// append the loadingScript var as an inline method in the onclick handler of any link to cause that link's view to be reflect that it is loading (i.e. with a loading icon)
	var loadingScript;
	
	if (reload) {
		// in this case, a targetId should have been sent from the caller
		view = document.getElementById(targetId);
		// update the title of the view to match the path
		jQuery(view).parent().parent("div.dock_window").children("div.dock_header").children()[2].innerHTML = unescape(desanitize(path));
		if(!append || append != "true") view.innerHTML = ''; // clear the view content to prepare for new content
	}
	else {

		// in this case, there was no targetId sent, so a new one was created
		view = OAT.Dom.create("div");
		view.className = "";
		view.id = targetId;
		dock.addObject(dock_index, view, {
			title : path,
			color : view_color, // "#3F4C6B", //"#356AA0"
			titleColor : title_color //"#EEEEEE"
		});
		// lay new modules from left to right, beginning at 0 after reaching the 3rd column
		if (dock_index == 2)
			dock_index = 0;
		else
			dock_index++;
		
		// set the value of the triple editor when view header is clicked
		var dheader = jQuery(view).parent().parent().children('.dock_header');
		dheader.click(
				
				function(){
					setValue(dheader.children()[2].innerHTML, dheader.children()[2].innerHTML);
				}
			
			);		
	}
	
	// unselect any selected items
	unselectAllItems();
	
	// when new view loads, set the v of the triple to the loaded path or resource
	if(isFromPropertyDefinition(sourceViewId)){
//		document.getElementById('v').value = path;
//		document.getElementById('vLabel').innerHTML = path;
	}
	else if(lastNonboundProp) {
		setProperty(DELIMIT_IRI_START + lastNonboundProp + DELIMIT_IRI_END, lastNonboundProp);
		if(lastNonboundPropReversed){
			swapSV();
			document.getElementById('r').value = 'true';
		}
		else {
			document.getElementById('r').value = 'false';
		}
	}
	else {
		setValue(path, path);
	}

	if(!append || append != "true"){ // only add button bar if the call was not for a stream of data
	
	var viewButtons = jQuery(document.createElement("div"));
	viewButtons.attr("class", "view_buttons");
	jQuery(view).append(viewButtons);
	
	sourceViewId = view.id; // send the sourceViewId down to the ajax methods
	// now that we have a sourceViewId, define the loadingScript script
	// jQuery needs dots to be escaped by two backslashes and a dot, since we're quoting this in javascript
	// we need to preserve the double backslash by escaping each one
	loadingScript = "jQuery('#" + sourceViewId.replace(".", "\\\\.") + "').children('div.view_buttons').children('.result_index')[0].className = 'result_index_loading';"	
	loadingScript += "jQuery('#" + sourceViewId.replace(".", "\\\\.") + "').children('div.view_buttons').children('.result_index_loading')[0].innerHTML = '&nbsp;loading...&nbsp;';"	

	
	
	// add view buttons so that the result loader has access to the button panel contents
	var offsetInt = parseInt(offset);
	var limitInt = parseInt(limit);
	var total = 100;
	path = escape(sanitize(path)); // after displaying the path, be sure to encode it

	// always end javascript with "return false;" so that page doesn't auto scroll to top onclick
	if(offsetInt > 0) viewButtons.append("<a title=\"previous page\" class=\"arrow\" href=\"#\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid="+sourceViewId+"&tid="+targetId+"&reload=true&viewType=" + viewType + "&path=" + path + "&offset=" + (offsetInt - limitInt) + "&limit=" + limit + "');return false;\">&lt;&lt;</a>&nbsp;");
	viewButtons.append("<a title=\"next page\" class=\"arrow\" href=\"#\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid="+sourceViewId+"&tid="+targetId+"&reload=true&viewType=" + viewType + "&path=" + path + "&offset=" + (offsetInt + limitInt) + "&limit=" + limit + "');return false;\">&gt;&gt;</a>");
	viewButtons.append("<span class=\"result_index\">" + offsetInt + " - " + (offsetInt + limitInt) + " of "+total+"</span>");
	if(viewType != "list") viewButtons.append("<a class=\"control\" href=\"#\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid="+sourceViewId+"&tid="+targetId+"&reload=true&viewType=list&path=" + path + "&offset=0&limit=" + limit + "');return false;\">"+LABEL_RESULTS+"</a>");
	else viewButtons.append("<span class=\"selected\" style=\"cursor:pointer;\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid="+sourceViewId+"&tid="+targetId+"&reload=true&viewType=list&path=" + path + "&offset=0&limit=" + limit + "');return false;\">"+LABEL_RESULTS+"</span>");
	if(viewType != "properties") viewButtons.append("<a class=\"control\" href=\"#\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid="+sourceViewId+"&tid="+targetId+"&reload=true&viewType=properties&path=" + path + "&offset=0&limit=" + limit + "');return false;\">"+LABEL_ABOUT+"</a>");
	else viewButtons.append("<span class=\"selected\">"+LABEL_ABOUT+"</span>");	
	if(viewType != "properties-in") viewButtons.append("<a class=\"control\" href=\"#\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid="+sourceViewId+"&tid="+targetId+"&reload=true&viewType=properties-in&path=" + path + "&offset=0&limit=" + limit + "');return false;\">"+LABEL_MATCHES+"</a>");
	else viewButtons.append("<span class=\"selected\">"+LABEL_MATCHES+"</span>");
	if(viewType != "classes") viewButtons.append("<a class=\"control\" href=\"#\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid="+sourceViewId+"&tid="+targetId+"&reload=true&viewType=classes&path=" + path + "&offset=0&limit=" + limit + "');return false;\">"+LABEL_GROUPS+"</a>");
	else viewButtons.append("<span class=\"selected\">"+LABEL_GROUPS+"</span>");
	
	var pinnedLinkId = Math.random();
	// gives two more modules, whose views are disjoint with this one
	var view1, view2, view3;
	if(viewType == "list") {
		view1 = "properties";
		view2 = "classes";
		view3 = "properties-in";
	}
	else if(viewType == "properties") {
		view1 = "list";
		view2 = "classes";
		view3 = "properties-in";
	}
	else if(viewType == "classes") {
		view1 = "list";
		view2 = "properties";
		view3 = "properties-in";
	}
	// launch the three primary windows
	// TODO: also, collapse this window
	else if(viewType == "properties-in") {
		view1 = "list";
		view2 = "properties";
		view3 = "classes";
	}
//	viewButtons.append("<a title=\"actions" + terms + "\" href=\"#\" class=\"control\" onclick=\"javascript:return false;\">"+LABEL_ACTIONS+"</a>");
	viewButtons.append("<a href=\"#\" title=\"launch linked data\" class=\"control\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + path + "', '"+view1+"');getViewForLink('"+sourceViewId+"', '', '" + path + "', '"+view2+"');getViewForLink('"+sourceViewId+"', '', '" + path + "', '"+view3+"');return false;\">"+LABEL_MORE_MODULES+"</a>");

	var tagsList = jQuery(document.createElement("a"));
	tagsList.attr("title", "tags");
	tagsList.attr("class", "control");
	tagsList.attr("href", "#");
	tagsList.text(LABEL_TAGS_LIST);
	makeTags(tagsList, path);
	viewButtons.append(tagsList);
	
	var textSearch = jQuery(document.createElement("a"));
	textSearch.attr("title", "text search");
	textSearch.attr("class", "control");
	textSearch.attr("href", "#");
	textSearch.text(LABEL_TEXT_SEARCH);
	makeSearch(textSearch, path, view.id);
	viewButtons.append(textSearch);
	
//	viewButtons.append("<a title=\"grab all selections" + terms + "\" href=\"#\" class=\"control\" onclick=\"javascript:return false;\">"+LABEL_TEXT_SEARCH+"</a>");
	var fullscreenButton = jQuery(document.createElement("a"));
	fullscreenButton.attr("title", "maximize");
	fullscreenButton.attr("class", "control");
	fullscreenButton.attr("href", "#");
	fullscreenButton.text(LABEL_MAXIMIZE);
	fullscreenButton.click(
			function(){
				getViewForLink(sourceViewId, '', path, viewType, '', '', "true");
				return false;
			}
	);
	viewButtons.append(fullscreenButton);
//	viewButtons.append("<a href=\"#\" title=\"maximize\" class=\"control\" onclick=\"javascript:\">"+LABEL_MAXIMIZE+"</a>");
	viewButtons.append("<a href=\"#\" title=\"detach view\" class=\"control\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + path + "', '"+viewType+"');return false;\">"+LABEL_DETACH+"</a>");

	var escaped_path = unescape(path);
	var delimit_node_escaped = DELIMIT_NODE;
	if(escaped_path.indexOf(delimit_node_escaped) > 0){
		var back_path = escaped_path.substring(0, escaped_path.lastIndexOf(delimit_node_escaped));
		viewButtons.append("<a href=\"#\" title=\"<-- go back\" class=\"control\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid=" + sourceViewId +"&tid="+targetId+"&reload=true&path=" + back_path + "&viewType=" + viewType + "&offset=0&limit=" + limit + "');return false;\">"+LABEL_BACK+"</a>");
	
		var foward_path = escaped_path.substring(escaped_path.lastIndexOf(delimit_node_escaped)+1);
		foward_path = escaped_path + DELIMIT_NODE + foward_path;
		viewButtons.append("<a href=\"#\" title=\"keep going -->\" class=\"control\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid=" + sourceViewId +"&tid="+targetId+"&reload=true&path=" + foward_path + "&viewType=" + viewType + "&offset=0&limit=" + limit + "');return false;\">"+LABEL_FOWARD+"</a>");
	}
	
	viewButtons.append("<a title=\"filter on these values\" href=\"#\" class=\"control\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid=" + sourceViewId +"&tid="+targetId+"&reload=true&path=" + path + DELIMIT_NODE + DELIMIT_REVERSE + DELIMIT_IRI_START + lastNonboundProp + DELIMIT_IRI_END + "&viewType=" + viewType + "&offset=0&limit=" + limit + "');return false;\">"+LABEL_FILTER_ON_THESE+"</a>");
	
	
	if(lastNonboundProp) {
//		var root = unescape(path);
//		root = root.substring(0, root.indexOf(DELIMIT_NODE));
		// attempt to parse the verb from the last non-bound property
		// to determine the verb, fetch the last property, regardless of whether its bound
//		var lastNonboundPropReversed = jQuery(data).find("metadata").attr("lpr");
		// if forced reverse, then let for forcedReverse property dictate the value of lastNonboundPropReverse 
		// always interpret lastNonboundPropReverse as its opposite for the purposes of the viewer
//		var forcedReverse = jQuery(data).find("metadata").attr("fr");
//		if(forcedReverse){
//			lastNonboundPropReversed = !lastNonboundPropReversed;
//		}
		var verb = jQuery(data).find("metadata").attr("lp");
		if(!verb) verb = "";
		else {
			verb = desanitize(unescape(verb));
			if(verb.indexOf("/") > 0){
				verb = verb.substring(verb.lastIndexOf("/") + 1);
			}
			if(verb.indexOf("#") > 0){
				verb = verb.substring(verb.lastIndexOf("#") + 1);
			}
			if(verb.indexOf(":") > 0){
				verb = verb.substring(verb.lastIndexOf(":") + 1);
			}
			verb = verb.replace("_", " ");
			if(startsWith(verb, "has")){
				verb = verb.substring(3);
				verb = jQuery.trim(verb);
//				lastNonboundPropReversed = !lastNonboundPropReversed;
			}
			
			// syntax:
			// forward properties list use 'verb'
			// reverse properties list use 'verb for...'
			if(!lastNonboundPropReversed){
				verb += " for...";
			}
		}
		viewButtons.append("<a title=\""+verb+"\" href=\"#\" class=\"control\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + path + (DELIMIT_NODE + ((lastNonboundPropReversed) ? "" : DELIMIT_REVERSE) + DELIMIT_IRI_START + lastNonboundProp + DELIMIT_IRI_END) + "', '"+viewType+"');return false;\">"+LABEL_WHO_TOO+"</a>");
	}
	
	
	
	// IMPLEMENT TEXT SEARCH
	var terms = document.getElementById('path').value;
	var prefix = '';
	var suffix = '';
	if(path.indexOf(DELIMIT_NODE) > 0){
		prefix = path.substring(0, path.indexOf(DELIMIT_NODE));
		suffix = path.substring(path.indexOf(DELIMIT_NODE)+1);
	}
	if(prefix.indexOf(DELIMIT_ONLY_TEXT) >= 0) terms += prefix.substring(prefix.indexOf(DELIMIT_ONLY_TEXT));
	if(prefix.indexOf(DELIMIT_EQ) >= 0) terms += prefix.substring(prefix.indexOf(DELIMIT_EQ));
	if(prefix.indexOf(DELIMIT_ALL_TEXT) >= 0) terms = DELIMIT_ALL_TEXT + terms;
	if(prefix.indexOf(DELIMIT_FOCUS) >= 0) terms = DELIMIT_FOCUS + terms;
	terms = prefix + terms + suffix;
	// BE CAREFUL WITH CLEARING THE LOCATION BAR, USER MAY BE TRYING TO LOAD ANOTHER VIEW
//	document.getElementById('path').value = '';
	
	
	
	viewButtons.append("<a title=\"add bookmark\" href=\"#\" class=\"control\" onclick=\"javascript:doBookmark('"+desanitize(path)+"');return false;\">"+LABEL_BOOKMARK+"</a>");
	viewButtons.append("<a title=\"pin this window\" class=\"pin\" id=\""+pinnedLinkId+"\" href=\"#\" onclick=\"javascript:togglePinned('"+pinnedLinkId+"');return false;\">"+LABEL_PIN+"</a>");
	
	
} // add button bar	
	
	
	// fetch the loader (simple logic chooses gallery or list)
	// only show gallery when viewing the results list for this path (not properties or categories)
	var loader;
	// for views based on properties, these views are only valid for forward relationships, not reverse
	// i.e. foaf:depiction means a photo of the subject
	// and *foaf:depiction means who/what the photo contains
	// only apply these views to the former, and only when viewing a results list, don't apply to value results lists (i.e when clicking the 'verb' or 'verb for...' link)
	if(!lastNonboundPropReversed){
		// display web page content when viewing a single result item, or when viewing homepage properties
		// let this one override normal list view
		// TODO: at this point, 'path' is still encoded, need to get rid of all the calls to escape()/unescape(); or else determine the morph of path as it proceeds through the method calls
		if (
				
				viewType == "list" && lastNonboundProp &&
				
				(
						
						endsWith(lastNonboundProp.toLowerCase(), "url") || endsWith(lastNonboundProp.toLowerCase(), "website") || endsWith(lastNonboundProp.toLowerCase(), "webpage") || endsWith(lastNonboundProp.toLowerCase(), "homepage") || endsWith(lastNonboundProp.toLowerCase(), "page") //|| 
				
//						(path.indexOf(escape(DELIMIT_NODE)) < 0 && path.indexOf(escape(DELIMIT_IRI_START)) == 0) ||
//						(path.indexOf(DELIMIT_NODE) < 0 && path.indexOf(DELIMIT_IRI_START) == 0)
				
				)
				
		) {
			loader = "loadWebpage";
		} 
		else if (lastNonboundProp && viewType == "list" && 
				
				(
						lastNonboundProp.indexOf("depict") >= 0 ||
						lastNonboundProp.indexOf("image") >= 0 ||
						lastNonboundProp.indexOf("thumbnail") >= 0 ||
						lastNonboundProp.indexOf("img") >= 0
				)
				
				
		) {
			loader = "loadPhotosGallery";
		} 
		else if (lastNonboundProp && viewType == "list" && 
				
				(
						endsWith(lastNonboundProp, "knows")
				)
				
		) {
			loader = "loadFriends";
		} 
		else if (lastNonboundProp && viewType == "list" && 
				
				(
						lastNonboundProp.toLowerCase().indexOf("isbn") >= 0
				)
				
		) {
			loader = "loadBook";
		} 
		else loader = "loadResults";
	}
	else loader = "loadResults";

	var unescapedPath = unescape(path);
	
	if (viewType == "list" && (unescapedPath == DELIMIT_IRI_START + document.getElementById("webid").value + DELIMIT_IRI_END || unescapedPath == document.getElementById("webid").value )) {
		loader = "loadMe";
	} 
	if (viewType == "list" && unescapedPath.lastIndexOf(DELIMIT_EQ) > unescapedPath.lastIndexOf(DELIMIT_NODE) &&
			
			(
					unescapedPath.indexOf("rdf:type|{http://purl.org/ontology/bibo/Note}") >= 0
			)
			
	) {
		loader = "loadNotes";
	} 
	if (viewType == "list" && unescapedPath.lastIndexOf(DELIMIT_EQ) > unescapedPath.lastIndexOf(DELIMIT_NODE) &&
			
			(
					unescapedPath.indexOf("rdf:type|{http://ns.qanvas.org/Bookmark}") >= 0 ||
					unescapedPath.indexOf("rdf:type|{http://ns.qanvas.org/Path}") >= 0 ||
					unescapedPath.indexOf("rdf:type|{http://ns.qanvas.org/History}") >= 0 ||
					unescapedPath.indexOf("rdf:type|q:Bookmark") >= 0 ||
					unescapedPath.indexOf("rdf:type|q:Path") >= 0 ||
					unescapedPath.indexOf("rdf:type|q:History") >= 0
			)
			
	) {
		loader = "loadBookmark";
	} 
	else if (viewType == "list" && lastNonboundProp &&
			
			(
					lastNonboundProp.toLowerCase().indexOf("http://ns.qanvas.org/visited") >= 0 || 
					lastNonboundProp.toLowerCase().indexOf("q:visited") >= 0
			)
			
	) {
		loader = "loadBookmark";
	} 

	var viewContent = jQuery(document.createElement("div"));
	viewContent.attr("class", "view_content");
	jQuery(view).append(viewContent);
	loader += "(data, path, viewContent, sourceViewId)";
	eval(loader);

	
	if(maximize == "true"){
		var view_copy = jQuery(view).parent().parent().clone();
		view_copy.attr("class", view_copy.attr("class") + " dock_fullscreen");
		jQuery(document.body).append(view_copy);
		jQuery(view).parent().parent().remove();
	}	

}

function endsWith(str, suffix) {
    if(str) return str.indexOf(suffix, str.length - suffix.length) != -1;
    return false;
}

function startsWith(str, prefix){
    return (str.indexOf(prefix) === 0);
}

function capitalize(string)
{
    return string.charAt(0).toUpperCase() + string.slice(1);
}

function toggleValues(id, name, verb) {
	if (document.getElementById(id).className.indexOf("hide") >= 0) {
		document.getElementById(id).className = name;
		document.getElementById("src" + id).innerHTML = LABEL_HIDE;
	}
	else {
		document.getElementById(id).className = name + " hide";
		document.getElementById("src" + id).innerHTML = verb;
	}
	return false; // stop the page from scrolling each time the link is clicked
}

function toggleTextResults(id, name, verb) {
	if (document.getElementById(id).className.indexOf("hide") >= 0) {
		document.getElementById(id).className = name;
		document.getElementById("src" + id).innerHTML = LABEL_HIDE;
	}
	else {
		document.getElementById(id).className = name + " hide";
		document.getElementById("src" + id).innerHTML = verb;
	}
	return false; // stop the page from scrolling each time the link is clicked
}

function togglePinned(id){
	if(pinned){
		document.getElementById(id).innerHTML = LABEL_PIN;
		document.getElementById(id).title = "pin this window";
		pinned = false;
	}
	else{
		document.getElementById(id).innerHTML = LABEL_UNPIN;
		document.getElementById(id).title = "unpin this window";
		pinned = true;
	}
}

function toggleResultSelect(id, name) {
	//alert('result selected: ' + id);
	if (document.getElementById(id).className.indexOf("selected") >= 0) {
		document.getElementById(id).className = name;
//		document.getElementById("src" + id).innerHTML = LABEL_HIDE;
	}
	else {
		document.getElementById(id).className = name + " selected";
//		document.getElementById("src" + id).innerHTML = verb;
	}
	return false; // stop the page from scrolling each time the link is clicked
}

//function createResource() {
//	var rand = Math.random();
//	var webid = document.getElementById('webid').value;
//
//	document.getElementById('path').value = DELIMIT_IRI_START + webid+"/iri/"+rand + DELIMIT_IRI_END; // send the new path
//	var params = getFormParams();
//	// remove text from input box after pulling it into params, but before making the ajax call
//	// this allows user to continue typing without having their text erased after the ajax call is complete
//	document.getElementById('path').value = "";
//	jQuery.get(baseUrl + "?limit=25&offset=0&viewType=list", params, loadView, 'xml');
//}

function replaceSV(){
//	if(document.getElementById('r').value == 'true'){
//		alert("Can't reverse property");
//		return;
//	}
	setSubject( document.getElementById('v').value, document.getElementById('vLabel').innerHTML);
	setValue('', '');
	
	unselectAllItems();
}
function swapSV(){
//	if(document.getElementById('r').value == 'true'){
//		alert("Can't reverse property");
//		return;
//	}
	var s = document.getElementById('s').value;
	document.getElementById('s').value = document.getElementById('v').value;
	document.getElementById('v').value = s;
	
	s = document.getElementById('sLabel').innerHTML;
	document.getElementById('sLabel').innerHTML = document.getElementById('vLabel').innerHTML;
	document.getElementById('vLabel').innerHTML = s;
	unselectAllItems();
}

function doHistory(path){
	var webid = document.getElementById('webid').value;
	var rand = Math.random();
	var q = "";
	q += "<"+webid+"/iri/"+rand+"> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ns.qanvas.org/History>. ";
	q += "<"+webid+"> <http://ns.qanvas.org/visited> <"+webid+"/iri/"+rand+">. ";
	q += "<"+webid+"/iri/"+rand+"> <http://ns.qanvas.org/value> \""+path+"\". ";
	q += "<"+webid+"/iri/"+rand+"> <http://xmlns.com/foaf/0.1/primaryTopic> \"history\". ";
	q += "<"+webid+"/iri/"+rand+"> <http://purl.org/dc/terms/created> \""+new Date().toUTCString()+"\". ";
	q += "<"+webid+"/iri/"+rand+"> <http://www.w3.org/2000/01/rdf-schema#label> \""+path+"\". ";
	q = "insert into graph <"+webid+"/fact/> { " + desanitize(q) + " }";
	jQuery.get(updateUrl + "?query=" + escape( q ), {}, function(){}, 'xml');
}

function doBookmark(path){
	path = unescape(path);
	var webid = document.getElementById('webid').value;
	var rand = Math.random();
	var q = "";
	
	// store single IRIs as resources not literals
	if(startsWith(path, DELIMIT_IRI_START) && endsWith(path, DELIMIT_IRI_END) && path.indexOf(DELIMIT_IRI_START) == path.lastIndexOf(DELIMIT_IRI_START)){
		while(path.indexOf(DELIMIT_IRI_START) >= 0 || path.indexOf(DELIMIT_IRI_END) >= 0){
			path = path.replace("{", "<");
			path = path.replace("}", ">");
		}
	}
	else {
		path = "\"" + path + "\"";
	}
	q += "<"+webid+"/iri/"+rand+"> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ns.qanvas.org/Bookmark>. ";
	q += "<"+webid+"/iri/"+rand+"> <http://ns.qanvas.org/value> "+path+". ";
	q += "<"+webid+"/iri/"+rand+"> <http://xmlns.com/foaf/0.1/maker> <"+webid+">. ";
	q += "<"+webid+"/iri/"+rand+"> <http://purl.org/dc/terms/created> \""+new Date().toUTCString()+"\". ";
	
	q = "insert into graph <"+webid+"/fact/> { " + desanitize(q) + " }";
	jQuery.get(updateUrl + "?query=" + escape( q ), {}, function(){}, 'xml');
	animatedcollapse.show('tripleBarPane');
	unselectAllItems();
	setSubject( "{" + webid+"/iri/"+rand + "}", rand+"");
	setProperty( "{http://www.w3.org/2000/01/rdf-schema#label}", "label");
	setValue( "click to edit bookmark name", "click to edit bookmark name");
}

function doCreate(){
	var webid = document.getElementById('webid').value;
	var rand = Math.random();
	var q = "";
	var v = document.getElementById('v').value;
	if(v && v.indexOf("{") < 0) v = DELIMIT_IRI_START + v + DELIMIT_IRI_END;
	if(document.getElementById('v').value) q += "<"+webid+"/iri/"+rand+"> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> " + v + ". ";
	q += "<"+webid+"/iri/"+rand+"> <http://xmlns.com/foaf/0.1/maker> <"+webid+">. ";
	q += "<"+webid+"/iri/"+rand+"> <http://purl.org/dc/terms/created> \""+new Date().toUTCString()+"\" ";
	while(q.indexOf("{") >= 0 || q.indexOf("}") >= 0){
		q = q.replace("{", "<");
		q = q.replace("}", ">");
	}
	
	q = "insert into graph <"+webid+"/fact/> { " + desanitize(q) + " }";
	jQuery.get(updateUrl + "?query=" + escape( q ), {}, function(){}, 'xml');
	animatedcollapse.show('tripleBarPane');
	unselectAllItems();
	setSubject("{" + webid+"/iri/"+rand + "}", rand+"");
	setProperty( "{http://www.w3.org/2000/01/rdf-schema#label}", "label");
	setValue("click to edit name", "click to edit name");
	
}

function saveStatement(){
	var webid = document.getElementById('webid').value;
	var s = document.getElementById('s').value;
	var v = document.getElementById('v').value;
	if(s == "I" || s == "me" || s == DELIMIT_IRI_START + "me" + DELIMIT_IRI_END) s = DELIMIT_IRI_START + webid + DELIMIT_IRI_END;
	if(v == "I" || v == "me" || v == DELIMIT_IRI_START + "me" + DELIMIT_IRI_END) v = DELIMIT_IRI_START + webid + DELIMIT_IRI_END;
	var pred = document.getElementById('p').value;
	if(s && s.indexOf("{") < 0) s = DELIMIT_IRI_START + s + DELIMIT_IRI_END;
	if(v && v.indexOf("{") < 0) v = "\"" + v + "\"";
	var q = s + " ";
	q += pred + " ";
	q += v + ". ";
	
	// add statement data
	var rand = Math.random();
	q += "<"+webid+"/iri/"+rand+"> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement>. ";
	q += "<"+webid+"/iri/"+rand+"> <http://xmlns.com/foaf/0.1/maker> <"+webid+">. ";
	q += "<"+webid+"/iri/"+rand+"> <http://purl.org/dc/terms/created> \""+new Date().toUTCString()+"\". ";
	q += "<"+webid+"/iri/"+rand+"> <http://www.w3.org/1999/02/22-rdf-syntax-ns#subject> "+s+". ";
	if(pred && pred.indexOf("{") < 0) pred = DELIMIT_IRI_START + pred + DELIMIT_IRI_END;
	q += "<"+webid+"/iri/"+rand+"> <http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate> " + pred + ". ";
	q += "<"+webid+"/iri/"+rand+"> <http://www.w3.org/1999/02/22-rdf-syntax-ns#object> "+v+" ";
	
	while(q.indexOf("{") >= 0 || q.indexOf("}") >= 0){
		q = q.replace("{", "<");
		q = q.replace("}", ">");
	}
	q = "insert into graph <"+webid+"/fact/> { " + desanitize(q) + " }";
	jQuery.get(updateUrl + "?query=" + escape( q ), {}, function(){}, 'xml');

	if(pred.indexOf("label") > 0){
		// set up triples for bookmark
		setSubject(s, s);
		setProperty("{http://xmlns.com/foaf/0.1/primaryTopic}","tag");
		setValue("click to edit tag", "click to edit tag");
	}
	else animatedcollapse.hide('tripleBarPane');
	//	document.getElementById('s').value = '';
//	document.getElementById('p').value = '';
//	document.getElementById('v').value = '';
//	document.getElementById('sLabel').innerHTML = '';
//	document.getElementById('pLabel').innerHTML = '';
//	document.getElementById('vLabel').innerHTML = '';
	
	unselectAllItems();
}

function unselectAllItems(){
	jQuery('.view_content').find('.panel_header.result_item.result_selected').attr('class', 'panel_header result_item');	
	jQuery('.view_content').find('.result_item.result_selected').attr('class', 'result_item');
	
	jQuery('.view_content').find('.panel_header.text_result_item.result_multi_selected').attr('class', 'panel_header text_result_item');	
	jQuery('.view_content').find('.panel_header.text_result_long.result_multi_selected').attr('class', 'panel_header text_result_long');	
	jQuery('.view_content').find('.panel_header.result_item.result_multi_selected').attr('class', 'panel_header result_item');	
	jQuery('.view_content').find('.result_item.result_multi_selected').attr('class', 'result_item');
}

function itemsSelected(){
	return jQuery('.view_content').find('.panel_header.result_item.result_multi_selected') && jQuery('.view_content').find('.panel_header.result_item.result_multi_selected').length > 0;	
}

function isFromPropertyDefinition(smid){
	if(!smid) return false;
	smid = "#"+smid.replace(".", "\\.");
	var src = jQuery(smid);
	if(!src) return false;
	var title = src.parent().siblings("div.dock_header").children()[2].innerHTML;
	if(title.indexOf(DELIMIT_NODE + "rdf:type" + DELIMIT_EQ + "rdf:Property" + DELIMIT_NODE + "skos:definition") >= 0) return true;
	if(title.indexOf(DELIMIT_NODE + "rdf:type" + DELIMIT_EQ + "rdf:Property" + DELIMIT_NODE + "rdfs:comment") >= 0) return true;
	return false;
}

function loadResults(data, path, viewContent, sourceViewId){
	var offset = jQuery(data).find("metadata").attr("offset");
	var limit = jQuery(data).find("metadata").attr("limit");
	var viewType = jQuery(data).find("metadata").attr("viewType");
	var path = jQuery(data).find("metadata").attr("path");
	var lastNonboundProp = jQuery(data).find("metadata").attr("lnp");
	var lastNonboundPropReversed = jQuery(data).find("metadata").attr("lnpr");
	
	var offsetInt = parseInt(offset);
	var limitInt = parseInt(limit);
	var total = 100;
	var pb, panelBar;
	
	// show values for each result if:
	// the path targets the property of something
	// the view is either properties, or categories
	if (lastNonboundProp || viewType=="properties" || viewType == "properties-in" || viewType == "classes") {
		// if showing the results of a property, list each result as a tree
		panelBar = jQuery(document.createElement("div"));
		panelBar.attr("id", Math.random());
		// append panelBar to the DOM so JS has access to it
		viewContent.append(panelBar);
	}

	
	// load single URL results as webpages
	if (viewType == "list" && jQuery(data).find("[nodeName=fct:row]").length <= 0) {
		loadWebpage(data, path, viewContent, sourceViewId);
		
		// since this is a single resource, prepare to set the value of the insert triple to this resource
		setValue(path, path);
		return;
	} 
	
	var row_ct = 0;
	var first_result_id; // remember the first result id so that the stream of data can scroll to it when finished loading
	// print each result
	var datatype;
	// now that we have a sourceViewId, define the loadingScript script
	// jQuery needs dots to be escaped by two backslashes and a dot, since we're quoting this in javascript
	// we need to preserve the double backslash by escaping each one
	var loadingScript = "jQuery('#" + sourceViewId.replace(".", "\\\\.") + "').children('div.view_buttons').children('.result_index')[0].className = 'result_index_loading';"	
	loadingScript += "jQuery('#" + sourceViewId.replace(".", "\\\\.") + "').children('div.view_buttons').children('.result_index_loading')[0].innerHTML = '&nbsp;loading...&nbsp;';"	
	
	jQuery(data).find("[nodeName=fct:row]").each(function() {

//		if(row_ct == 0){
//			viewContent.parent().children("div.view_buttons").children(".result_index_loading")[0].innerHTML = "loading...";
//		}
//		viewContent.parent().children("div.view_buttons").children(".result_index_loading")[0].innerHTML = offset + " - " + row_ct + " of " + limit;
		
		var shortform, label, iri, valueCt;
		var i = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (i == 0) {
				shortform = jQuery(this).attr("shortform");
				datatype = jQuery(this).attr("datatype");
				if(!datatype) datatype = "http://www.w3.org/2001/XMLSchema#string";
				iri = jQuery(this).text();
				// escape any ' char in the path
				iri = sanitize(iri);
			}
			else
				if (i == 1) {
					label = jQuery(this).text();
					if (!label ){
						if(datatype != "uri"){
							label = iri; // sometimes the object is a string
							label = desanitize(label);
							label = unescape(label);
//							label = label.replace(/([A-Z])/g, ' $1');
							while(label.indexOf("_") >= 0) label = label.replace("_", " ");
							// literal, not an iri
						}
						else {
							label = iri;
							label = parseLabel(label);
						}
					}
				}
				else if(i == 2){
					valueCt=jQuery(this).text()
				}

			i++;
		}); // each column

		var targetNode, ajaxTargetNode;
		if (lastNonboundProp || viewType=="properties" || viewType == "properties-in" || viewType == "classes") {
			var panelHeader = jQuery(document.createElement("div"));
			var panelBody = jQuery(document.createElement("div"));
			var pid = createId(); // let header and body share the same id, that way they are coupled
			panelHeader.attr("id", "pbh"+pid);
			panelBody.attr("id", "pbb"+pid);
			panelHeader.attr("class", "panel_header result_item");
			panelHeader.click(
					function(){
						var hid = "pbh"+pid;
						if (document.getElementById(hid).className.indexOf("result_multi_selected") >= 0 || document.getElementById(hid).className.indexOf("result_selected") >= 0) {
							//document.getElementById(hid).className = 'panel_header result_item';
						}
						if (!document.getElementById('v').value || document.getElementById('v').value.length <= 0) {
							//document.getElementById(hid).className = document.getElementById(hid).className + " result_multi_selected";
							animatedcollapse.show('tripleBarPane');
//							if(viewType == "list"){
//								document.getElementById('v').value = DELIMIT_IRI_START + iri + DELIMIT_IRI_END;
//								document.getElementById('vLabel').innerHTML += jQuery(document.getElementById(hid)).text();
//							}
						}
						else {
							//document.getElementById(hid).className = document.getElementById(hid).className + " result_multi_selected";
							animatedcollapse.show('tripleBarPane');
						}
						if(viewType == "list" || viewType == "classes") {
							// only replace the value with the selection if this is the first time an item is selected
							// otherwise, concantenate the values
							if(isFromPropertyDefinition(sourceViewId)){
								setProperty( DELIMIT_IRI_START + iri + DELIMIT_IRI_END, parseLabel(jQuery(document.getElementById(hid)).children('.result_content')[0].innerHTML));
							}
							else {
								setValue( DELIMIT_IRI_START + iri + DELIMIT_IRI_END, parseLabel(jQuery(document.getElementById(hid)).children('.result_content')[0].innerHTML));
							}
						}
						if(viewType == "properties" || viewType == "properties-in" ) {
							setProperty(DELIMIT_IRI_START + iri + DELIMIT_IRI_END, parseLabel(jQuery(document.getElementById(hid)).children('.result_content')[0].innerHTML));
							unselectAllItems();
						}
						return false; // stop the page from scrolling each time the link is clicked
					}
			);
			panelBody.attr("class", "panel_body hide");
			panelBar.append(panelHeader);
			panelBar.append(panelBody);
			targetNode = panelHeader;
			ajaxTargetNode = panelBody;
		}
		else {
			var result = jQuery(document.createElement("div"));
			var rid = createId();
			result.attr("class", "result_item");
			result.attr("id", rid);
			result.click(
					function(){
						if (document.getElementById(rid).className.indexOf("result_multi_selected") >= 0 || document.getElementById(rid).className.indexOf("result_selected") >= 0) {
							//document.getElementById(rid).className = 'result_item';
						}
						else if  (!document.getElementById('v').value || document.getElementById('v').value.length <= 0) {
							//document.getElementById(rid).className = document.getElementById(rid).className + " result_multi_selected";
							animatedcollapse.show('tripleBarPane');
						}
						else {
							//document.getElementById(rid).className = document.getElementById(rid).className + " result_multi_selected";
							animatedcollapse.show('tripleBarPane');
						}
						if(viewType == "list" || viewType == "classes") {
							// only replace the value with the selection if this is the first time an item is selected
							// otherwise, concantenate the values
//							if(itemsSelected()) {
//								document.getElementById('v').value += DELIMIT_UNION + DELIMIT_IRI_START + iri + DELIMIT_IRI_END;
//								document.getElementById('vLabel').innerHTML += ((document.getElementById('vLabel').innerHTML) ? " && ": "") + jQuery(document.getElementById(rid)).text();
//							}
							if(isFromPropertyDefinition(sourceViewId)){
								setProperty(DELIMIT_IRI_START + iri + DELIMIT_IRI_END, parseLabel(jQuery(document.getElementById(hid)).children('.result_content')[0].innerHTML));
							}
							else {
								setValue(DELIMIT_IRI_START + iri + DELIMIT_IRI_END, parseLabel(jQuery(document.getElementById(rid)).children('.result_content')[0].innerHTML));
							}
						}
						if(viewType == "properties" || viewType == "properties-in") {
							setProperty(DELIMIT_IRI_START + iri + DELIMIT_IRI_END, parseLabel(jQuery(document.getElementById(rid)).children('.result_content')[0].innerHTML));
							unselectAllItems();
						}
						return false; // stop the page from scrolling each time the link is clicked
					}
			);
			viewContent.append(result);
			targetNode = result;
			ajaxTargetNode = result;
		}
		
		//----------------- LOAD EACH RESULTS ---------------/
			// if datatype is URL, print links and cater viewer direction to the
			// guessed goal of the user
			// otherwise, print plain text
			if (datatype == "uri") {
				// send a request for a new view, thus, do not send any targetIds, this way, one the recurse call back to this method
				// a new view with a new id will be created
				if (viewType == "list") {
					targetNode.append("<a href=\"#\" class=\"result_content\" title=\""+desanitize(iri)+"\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + DELIMIT_IRI_START + iri + DELIMIT_IRI_END + "', 'properties');return false;\">" + label + "</a>");
					
					// reverse properties do not quality for "forward jump" since the jump does not mean "append property to path" but instead means "take property away from path"
					// and this is achieved with the back button and would only confuse users if the meaning of &raquo; changed,
					// therefore, simply don't show it
					if (lastNonboundProp) {
						targetNode.append("&nbsp;<a href=\"#\" title=\"filter on this\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + sanitize(path + DELIMIT_EQ + DELIMIT_IRI_START + iri + DELIMIT_IRI_END) + "', 'list');return false;\">&raquo;</a>");
					}
					// if rdfs:label restriction was lifted, and if no props are in the path (aside from bound properties) then add text
					// in other words, only add text nodes when the view's focus is a unrestricted text match
					// matches to the results, the DELIMIT_ALL_TEXT can be the first char, or it can follow the DELIMIT_ALL_TEXT
					if ( (path.indexOf(DELIMIT_ALL_TEXT) == 0 || path.indexOf(DELIMIT_ALL_TEXT) == 1) && !lastNonboundProp ) {
						// encode the statement object iri (the 'panelHeader'
						// iri)
						var iriEncoded = iri;//escape(iri); 
						// after displaying the path, be sure to encode it here and  decode it on server side, the # character
						// is not sent to the  server or is stripped by the server one, do not use encodeURL, it doesnt encode 
						// # grab the id of the parent node
						var textResult = jQuery(document.createElement("div"));
						textResult.attr("class", "panel_body hide");
						textResult.attr("id", Math.random());
						viewContent.append(textResult); // add as sister of the associated result, not as a child of the result, otherwise, the view/hide link is misplaced
						
						// fetch the function
						var funct = "loadTextMatchValues";
						jQuery.get(baseUrl + "?tid="+textResult.attr("id")+"&limit=25&offset=0&viewType=text" + "&path=" + sanitize(path + DELIMIT_EQ + DELIMIT_IRI_START + iri + DELIMIT_IRI_END), {}, window[funct], 'xml');
					}
					
					// load the category of the result
					if(banwidth_hog) jQuery.get(baseUrl + "?smid="+sourceViewId+"&tid="+targetNode.attr("id")+"&limit=5&offset=0&viewType=list&path=" + DELIMIT_IRI_START + iri + DELIMIT_IRI_END + DELIMIT_NODE + "rdf:type", {}, setResultCategory, 'xml');

				}

				else
					if (viewType == "properties"){
						targetNode.append("<a href=\"#\" class=\"result_content\" title=\""+desanitize(iri)+"\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + sanitize(path + DELIMIT_NODE + DELIMIT_IRI_START + iri + DELIMIT_IRI_END) + "', 'list');return false;\">" + label.toLowerCase() +"</a><span class=\"valueCt\">" + valueCt + "</span>");
						
						var tid = viewContent.parent().attr("id");
						targetNode.append("&nbsp;<a href=\"#\" title=\"filter on this\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid="+tid+"&tid="+tid+"&reload=true&viewType=properties&path=" + path + DELIMIT_NODE + DELIMIT_IRI_START + iri + DELIMIT_IRI_END + DELIMIT_NODE + DELIMIT_REVERSE + DELIMIT_IRI_START + iri + DELIMIT_IRI_END + "&offset=" + (offsetInt + limitInt) + "&limit=" + limit + "');return false;\">"+LABEL_ADD_FILTER+"</a>");
//						targetNode.append("&nbsp;<a href=\"#\" title=\"filter on this\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + sanitize(path + DELIMIT_NODE + DELIMIT_IRI_START + iri + DELIMIT_IRI_END) + "', 'list');return false;\">"+LABEL_FILTER_ON_THESE+"</a>");
					}
					else
						if (viewType == "properties-in"){
							
							// if this is a reversed property, then attempt to express the relationship in English; check if:
							// 1. the view represents a non bound reversed property (bound properties don't count as selector nodes)
							// 2. the current view is reverse properties (i.e. properties-in)
							var proplink = "<a href=\"#\" class=\"result_content\" title=\""+desanitize(iri)+"\"  onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + sanitize(path + DELIMIT_NODE + DELIMIT_REVERSE + DELIMIT_IRI_START + iri + DELIMIT_IRI_END) + "', 'list');return false;\">" + label.toLowerCase() + "</a><span class=\"valueCt\">" + valueCt + "</span>";
//							if (!lastNonboundPropReversed && viewType == "properties-in") {
//								targetNode.append(LABEL_REVERSE_PREFIX + proplink);
//							}
//							else {
//								targetNode.append(LABEL_REVERSE_PREFIX_MATCHES_VIEW + proplink + LABEL_REVERSE_SUFFIX_MATCHES_VIEW);
//							}
							targetNode.append("<span class=\"property_result_text\">" + LABEL_REVERSE_PREFIX_MATCHES_VIEW + "</span>" + proplink + "<span class=\"property_result_text\">" + LABEL_REVERSE_SUFFIX_MATCHES_VIEW + "<span>");
							var tid = viewContent.parent().attr("id");
//							targetNode.append("&nbsp;<a class=\"addFilter\" href=\"#\" title=\"filter on this\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid="+tid+"&tid="+tid+"&reload=true&viewType=properties&path=" + path + DELIMIT_NODE + DELIMIT_IRI_START + iri + DELIMIT_IRI_END + DELIMIT_NODE + DELIMIT_REVERSE + DELIMIT_IRI_START + iri + DELIMIT_IRI_END + "&offset=" + (offsetInt + limitInt) + "&limit=" + limit + "');return false;\">"+LABEL_ADD_FILTER+"</a>");
//							targetNode.append("&nbsp;<a class=\"addFilter\" href=\"#\" title=\"filter on this\" onclick=\"javascript:"+loadingScript+"reloadView('" + baseUrl + "?smid="+tid+"&tid="+tid+"&reload=true&viewType=properties&path=" + path + DELIMIT_NODE + DELIMIT_REVERSE + DELIMIT_IRI_START + iri + DELIMIT_IRI_END + "&offset=" + (offsetInt + limitInt) + "&limit=" + limit + "');return false;\">"+LABEL_FILTER_ON_THESE+"</a>");
//							targetNode.append("&nbsp;<a href=\"#\" title=\"filter on this\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + sanitize(path + DELIMIT_NODE + DELIMIT_REVERSE + DELIMIT_IRI_START + iri + DELIMIT_IRI_END) + "', 'list');return false;\">"+LABEL_FILTER_ON_THESE+"</a>");
						}
					else
						if (viewType == "classes"){
							if(!endsWith(label, "s")){
								if(endsWith(label, "y")){
									label = label.substring(0, label.length - 1);
									label += "ies";
								}
								else if(endsWith(label, "ch")){
									label = label.substring(0, label.length - 2);
									label += "es";
								}
								else if(endsWith(label, "x")){
									label = label.substring(0, label.length - 2);
									label += "es";
								}
								else if(endsWith(label, "i")){
								}
								else{
									label += "s";
								}
							}
							
							// transfer the focus to the root of the path, but only if the DELIMIT_FOCUS is not already assigned to the root
							if(path.indexOf(DELIMIT_FOCUS) < 0) path = DELIMIT_FOCUS + path;
							targetNode.append("<a href=\"#\" class=\"result_content\" title=\""+desanitize(iri)+"\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + sanitize(path + DELIMIT_NODE + "rdf:type" + DELIMIT_EQ + DELIMIT_IRI_START + iri + DELIMIT_IRI_END) + "', 'list');return false;\">" + capitalize(label) + "</a><span class=\"valueCt\">" + valueCt + "</span>");
//							targetNode.append("&nbsp;<a href=\"#\" title=\"filter on this\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + sanitize(path + DELIMIT_NODE + "rdf:type" + DELIMIT_EQ + DELIMIT_IRI_START + iri + DELIMIT_IRI_END) + "', 'list');return false;\">&raquo;</a>");
						}
			}
			else {
				// don't allow hover to change background color for plain text items, since the effect is only to help with clicking stuff
				// so define as a separate css class from result_item
				// also, make long text pretty
				targetNode.attr("class", ((label.length > 60) ? "text_result_long" : "text_result_item")); // don't allow hover to change background color for plain text items, since the effect is only to help with clicking stuff
				// format date values
				if(lastNonboundProp && 
						(
								endsWith(lastNonboundProp.toLowerCase(), "modified") || endsWith(lastNonboundProp.toLowerCase(), "created") || endsWith(lastNonboundProp.toLowerCase(), "month") || endsWith(lastNonboundProp.toLowerCase(), "date") || endsWith(lastNonboundProp.toLowerCase(), "year") || lastNonboundProp.toLowerCase().indexOf("date") >= 0
						)						
				){
//					var date = jQuery(document.createElement("div"));
					var pretty = jQuery(document.createElement("span"));
					var iso8601Format = dateFormat(new Date(label), "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'");
					pretty.attr("title", iso8601Format);
					pretty.text(" (" + label + ")");
					targetNode.append(pretty);		
					pretty.humaneDates();		
					var raw = jQuery(document.createElement("span"));
					raw.attr("class", "result_content");
					var datelabel = dateFormat(new Date(label), "dd mmm yy HH:MM:ss");
					raw.text(" (" + datelabel + ")");
					targetNode.append(raw);
//					targetNode.html(date);
				}
				else{
					targetNode.html("<span class=\"result_content\">" + unescape(desanitize(label)) + "</span>");
				}
				
				// see above comment
				if (lastNonboundProp && !lastNonboundPropReversed) {
					targetNode.append("&nbsp;<a href=\"#\" title=\"filter on this\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + sanitize(path + DELIMIT_EQ + label) + "', 'list', null, '"+datatype+"');return false;\">&raquo;</a>");
				}
			}
			
			
			// when a link is clicked, don't propagate the click event up to the clickable div
			targetNode.children().click(function(event){
			    event.stopImmediatePropagation();
			});

			
			

		// does the path have a non bound property trailing it?
		// if so, add its values to the result item
		if (lastNonboundProp && viewType == "list") {
			// sure to encode it here and decode
			// it on server side, the #
			// character is not sent to the
			// server or is stripped by the
			// server one, do not use encodeURL,
			// it doesnt encode #
			// grab the current row count before the asynch call is made,
			// otherwise, you might grab the wrong one
			var funct = "loadValues";
			
			// this section loads the reverse values of the properties, i.e. the answer to ...who or what else?
			// this is done simply by finding the inverse of the last non bound property node, if that node is specified as inverse, then the forward link is needed			
			// also, if the result item is pure text, then be sure to search all text using the DELIMIT_ALL_TEXT
			var p;
			if (datatype == "uri"){
				// TODO: (improve this) filtered values by default, but unfilter the values if a single bang char is in the location bar
				if(document.getElementById("path").value != "!"){
					p = path;
					// add the item of this results set as the value of the non bound property... in the case where raw text is not the root
					// the effect is that:
					// 1. by bounding the last property, the focus goes to the next to last node (TODO ensure that this is what we want)
					// 2. by specifying that the last property be bound to the value of this current result, we are restricting
					// 	  the returned values (subjects) returned by 'path' to those who have this item as its object; we achieve this restriction
					// 	  by appending the restriction to 'path'
					p += DELIMIT_EQ + DELIMIT_IRI_START + iri + DELIMIT_IRI_END;
				}
				// unfiltered values
				else {
					p = DELIMIT_IRI_START + iri + DELIMIT_IRI_END;
					
					// to get at the subjects of the values in this results list, reverse (take the opposite of) the property
					// this has the effect of:
					// 1. adding a new condition which requests all subjects where the item in this result is the object of the given property
					// 2. we achieve lifting the restriction by disregarding the 'path' and instead building a new path where the result item is the 
					// 	  object of a request for subjects linked to the result item via lastNonboundProp
					
					// because we forced a foward path to be expressed as a reverse one, this query should always be considered
					// as its opposite as far as the viewer is concerned; we need to let the viewer know
					// we do this by sending a special property to the server and the server sending that property back
					p += DELIMIT_NODE + ((lastNonboundPropReversed) ? "" : DELIMIT_REVERSE) + DELIMIT_IRI_START + lastNonboundProp + DELIMIT_IRI_END + "&fr=true";
				}
			}
			else {
				var edn = DELIMIT_NODE;
				p = (path.indexOf(DELIMIT_NODE) > 0) ? path.substring(path.indexOf(DELIMIT_NODE)) : "";
//				p = p.substring(0, p.lastIndexOf(DELIMIT_NODE));
				p = DELIMIT_ALL_TEXT + label + DELIMIT_ONLY_TEXT + DELIMIT_IRI_START + lastNonboundProp + DELIMIT_IRI_END + p;
				p += DELIMIT_NODE + ((lastNonboundPropReversed) ? "" : DELIMIT_REVERSE) + DELIMIT_IRI_START + lastNonboundProp + DELIMIT_IRI_END + "&fr=true";
			}
			// clean up hash chars and other non-server friendly chars
			p = sanitize(p);
			jQuery.get(baseUrl + "?tid="+ajaxTargetNode.attr("id")+"&limit=25&offset=0&viewType=" + viewType + "&path=" + p, {}, window[funct], 'xml');

		}
		
		else if(viewType == "properties" || viewType == "properties-in"){
			if(banwidth_hog2) jQuery.get(baseUrl + "?tid="+ajaxTargetNode.attr("id")+"&limit=25&offset=0&viewType=list&path=" + path + DELIMIT_NODE + DELIMIT_IRI_START + iri + DELIMIT_IRI_END, {}, window["loadValues"], 'xml');
		}
		
		else if(viewType == "classes"){
			if(banwidth_hog2) jQuery.get(baseUrl + "?tid="+ajaxTargetNode.attr("id")+"&limit=25&offset=0&viewType=list&path=" + path + DELIMIT_NODE + "rdf:type" + DELIMIT_EQ + DELIMIT_IRI_START + iri + DELIMIT_IRI_END, {}, window["loadValues"], 'xml');
		}
		
		if(row_ct == 0) first_result_id = targetNode.attr("id");
		row_ct++;
//		
////		// load single URL results as webpage after listing the single item for edit purposes
		if (datatype == "uri" && viewType == "list" && jQuery(data).find("[nodeName=fct:row]").length == 1) {
			loadWebpage(data, path, viewContent, sourceViewId);
			
			// since this is a single resource, prepare to set the value of the insert triple to this resource
			setValue(DELIMIT_IRI_START + iri + DELIMIT_IRI_END, label);
			return;
		} 
		
	}); // each row
	
		
	
	// BE CAREFULE CLEARING THE LOCATION BAR, USER MAY BE TRYING TO LOAD ANOTHER VIEW
//	document.getElementById('path').value = ''; // clear the location bar
	
	
	var resultIndexContent = (offsetInt + " - " + (offsetInt + limitInt) + " of "+total);
	var resultStatus = viewContent.parent().children("div.view_buttons").children(".result_index_loading");
	if(resultStatus && resultStatus.length > 0){
		resultStatus[0].className = "result_index";	
		resultStatus[0].innerHTML = resultIndexContent;	
	}

	// if this is a stream of data call
	// and if the last result was equal to the limit, then offer a more link to for a stream of data
	// TODO this method used to test row_ct == limitInt, but since the local results (from the silo)
	// are now loaded in union with the first limitInt results from the GGG, we must test for
	// equal or greater than limitInt, this is a bug/flaw as only limitInt results should load in each page
	if(row_ct >= limitInt){
		var append = jQuery(data).find("metadata").attr("append");
		if(append && append == "true") document.getElementById(first_result_id).scrollIntoView();
		
		// add the stream of data bar
		var moreLink = jQuery(document.createElement("div"));
		moreLink.attr("class", "more");
		moreLink.attr("id", Math.random());
//		var removeScript = "jQuery('#" + moreLink.attr("id").replace(".", "\\\\.") + "').remove();";
		var nextSetContent = ((offsetInt + limitInt) + " - " + (offsetInt + (limitInt*2)) + " of "+total);
		var removeScript = "jQuery('#" + moreLink.attr("id").replace(".", "\\\\.") + "').html('"+nextSetContent+"');jQuery('#" + moreLink.attr("id").replace(".", "\\\\.") + "').attr('class', 'moreLabel');";
		var targetId = viewContent.parent().attr("id");
		moreLink.append("<a title=\"more\" class=\"moreLink\" href=\"#\" onclick=\"javascript:"+loadingScript+removeScript+"reloadView('" + baseUrl + "?smid="+targetId+"&tid="+targetId+"&reload=true&viewType=" + viewType + "&path=" + path + "&offset=" + (offsetInt + limitInt) + "&limit=" + limit + "&append=true');return false;\">more</a>");	
		viewContent.append(moreLink);
	}
	
	
}

function loadTextMatchValues(data) {
//	var parentId;
	var toggleAdded;
	var targetNode = jQuery(document.getElementById(jQuery(data).find("metadata").attr("tid")));
	var lastNonboundPropReversed = jQuery(data).find("metadata").attr("lnpr");
	
	// attempt to parse the verb from the last non-bound property
	var verb = jQuery(data).find("metadata").attr("lnp");
	if(!verb) verb = "view text";
	else {
		verb = desanitize(unescape(verb));
		if(verb.indexOf("/") > 0){
			verb = verb.substring(verb.lastIndexOf("/") + 1);
		}
		if(verb.indexOf("#") > 0){
			verb = verb.substring(verb.lastIndexOf("#") + 1);
		}
		if(verb.indexOf(":") > 0){
			verb = verb.substring(verb.lastIndexOf(":") + 1);
		}
		// syntax:
		// forward properties list use 'verb'
		// reverse properties list use 'verb for...'
		if(!lastNonboundPropReversed){
			verb += " for...";
		}
	}
	
	jQuery(data).find("[nodeName=fct:row]").each(function() {

		if (!toggleAdded && !lastNonboundPropReversed) {
			// add link to panelHeader for showing panelBody
			// the result associated with this textResult div is its $().prev() div
			targetNode.prev().append(" <a class=\"toggleValues\" id=\"src" + targetNode.attr("id") + "\" href=\"#\" onclick=\"javascript:toggleTextResults('" + targetNode.attr("id") + "', 'panel_body', '"+verb+"');return false;\">"+ verb + "</a>");
			toggleAdded = true;
		}

		var shortform2, trank, erank, highlighted, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
		
			if (j == 2) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 0) {
					trank = jQuery(this).text();
				}
				else
					if (j == 1) {
						erank = jQuery(this).text();
					}
					else
						if (j == 4) {
							highlighted = jQuery(this).text();
						}
						else
							if (j == 3) {
								label2 = jQuery(this).text();
								if (!label2) {
									label2 = iri2; // sometimes the object is a string literal, not an iri
								}
							}

			j++;
		}); // each column
		var value_list_item = jQuery(document.createElement("div"));
		value_list_item.attr("class", "textSearchItem");
		// BUG: results sometimes send back entities, and its difficult to
		// decode them
		if (highlighted.indexOf("&gt;") > 0 || highlighted.indexOf("&lt;") > 0) {
			highlighted = highlighted.replace("/&gt;/gi", ">");
			highlighted = highlighted.replace("/&lt;/gi", "<");
			highlighted = value_list_item.html(highlighted).text();
		}
		value_list_item.html(highlighted);
		targetNode.append(value_list_item);

		
		// TODO: investigate whether its nessassary to call this two for each condition, or can we collapse this block into the above
		// block... i.e. does it matter that we append this block of text after or before appending the result?
		if (!toggleAdded && lastNonboundPropReversed) {
			// add link to panelHeader for showing panelBody
			// the result associated with this textResult div is its $().prev() div
			targetNode.prev().append(" <a class=\"toggleValues\" id=\"src" + targetNode.attr("id") + "\" href=\"#\" onclick=\"javascript:toggleTextResults('" + targetNode.attr("id") + "', 'panel_body', '"+verb+"');return false;\">"+ verb + "</a>");
			toggleAdded = true;
		}
	}); // each row
	
	// when a link is clicked, don't propagate the click event up to the clickable div
	targetNode.prev().children().click(function(event){
	    event.stopImmediatePropagation();
	});
}

function loadValues(data) {
	var toggleAdded;
	var tid = jQuery(data).find("metadata").attr("tid");
	var targetNode = jQuery(document.getElementById(tid));
	var pid = tid.substring(tid.indexOf("pbb")+3);// the header and body are coupled by their id
	var viewType = jQuery(data).find("metadata").attr("viewType");
	
	// attempt to parse the verb from the last non-bound property
	// to determine the verb, fetch the last property, regardless of whether its bound
	var lastNonboundPropReversed = jQuery(data).find("metadata").attr("lpr");
	// if forced reverse, then let for forcedReverse property dictate the value of lastNonboundPropReverse 
	// always interpret lastNonboundPropReverse as its opposite for the purposes of the viewer
	var forcedReverse = jQuery(data).find("metadata").attr("fr");
	if(forcedReverse){
		lastNonboundPropReversed = !lastNonboundPropReversed;
	}
	var lnp = jQuery(data).find("metadata").attr("lnp");
	var verb = (lnp) ? lnp : jQuery(data).find("metadata").attr("lp");
	if(!verb) verb = "show values";
	else {
		verb = desanitize(unescape(verb));
		if(verb.indexOf("/") > 0){
			verb = verb.substring(verb.lastIndexOf("/") + 1);
		}
		if(verb.indexOf("#") > 0){
			verb = verb.substring(verb.lastIndexOf("#") + 1);
		}
		if(verb.indexOf(":") > 0){
			verb = verb.substring(verb.lastIndexOf(":") + 1);
		}
		verb = verb.replace("_", " ");
		if(startsWith(verb, "has")){
			verb = verb.substring(3);
			verb = jQuery.trim(verb);
//			lastNonboundPropReversed = !lastNonboundPropReversed;
		}
		
		// syntax:
		// forward properties list use 'verb'
		// reverse properties list use 'verb for...'
		if(!lastNonboundPropReversed){
			verb += " for...";
		}
	}
	
	var row_ct = 0;
	
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						label2 = parseLabel(label2);
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		var value_list_item = jQuery(document.createElement("div"));
		
//		var lastNonboundProp = jQuery(data).find("metadata").attr("lnp");
//		if(lastNonboundProp && 
//				(
//						endsWith(lastNonboundProp.toLowerCase(), "month") || endsWith(lastNonboundProp.toLowerCase(), "date") || endsWith(lastNonboundProp.toLowerCase(), "year") || endsWith(lastNonboundProp.toLowerCase(), "date")
//				)						
//		){
//			var date = jQuery(document.createElement("div"));
//			var pretty = jQuery(document.createElement("span"));
//			pretty.attr("title", label2);
//			pretty.text(" (" + label2 + ")");
//			date.append(pretty);		
//			pretty.humaneDates();		
//			var raw = jQuery(document.createElement("span"));
//			raw.text(" (" + label2 + ")");
//			date.append(raw);
//			value_list_item.append(date);
//		}
//		else{
			value_list_item.append("&middot; <a href=\"#\" title=\""+iri2+"\" onclick=\"javascript:getViewForLink('', '', '" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + "', 'properties');return false;\">" + label2 + "</a>");
//		}
		
		targetNode.append(value_list_item);

		row_ct++;
	}); // each row
	
	// add toggle link
	var l = "1 - " + row_ct;
	var targetHeader = jQuery(document.getElementById("pbh"+pid));
	var valueCt = targetHeader.children(".valueCt").text();
	l = row_ct + " of " + ((!valueCt) ? row_ct : valueCt);
	if (row_ct > 0 && !toggleAdded && !lastNonboundPropReversed) {
		targetHeader.children(".valueCt").remove();
		// add link to panelHeader for showing panelBody
		jQuery(document.getElementById("pbh"+pid)).append(" <a title=\""+verb+"\" class=\"toggleValues\" id=\"src" + targetNode.attr("id") + "\" href=\"#\" onclick=\"javascript:toggleValues('" + targetNode.attr("id") + "', 'panel_body', '"+l+"');return false;\">" + l + "</a>");
		toggleAdded = true;
	}
	
	if (row_ct > 0 && !toggleAdded && lastNonboundPropReversed) {
		targetHeader.children(".valueCt").remove();
		// add link to panelHeader for showing panelBody
		jQuery(document.getElementById("pbh"+pid)).append(" <a title=\""+verb+"\" class=\"toggleValues\" id=\"src" + targetNode.attr("id") + "\" href=\"#\" onclick=\"javascript:toggleValues('" + targetNode.attr("id") + "', 'panel_body', '"+l+"');return false;\">"+ l + "</a>");
		toggleAdded = true;
	}

	
	// when a link is clicked, don't propagate the click event up to the clickable div
	jQuery(document.getElementById("pbh"+pid)).children().click(function(event){
	    event.stopImmediatePropagation();
	});
}

function loadPhotosGallery(data, path, viewContent, sourceViewId){
	var toggleAdded;
	
	// gallery housekeeping stuff	
	var gallery = jQuery(document.createElement("div"));
	gallery.attr("id", Math.random());
	gallery.attr("class", "galleryElement");
	
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		gallery.append("<a href\"www.google.com\"><img class=\"galleryPhoto\" src=\""+iri2+"\" class=\"full\" onclick=\"javascript:getViewForLink('', '', '" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + "', 'properties')\"/></a>");
	}); // each row
	
	viewContent.append(gallery);
	gallery.galleria({
        width:'auto',
        height:500,
        imageCrop:true
    });
}

function loadPhoto(data){
	var tid = jQuery(data).find("metadata").attr("tid");
	var row_ct = 0;
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		if(row_ct > 0) return;
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		if(row_ct == 0){
			var target = jQuery(document.getElementById(tid));
			target.append("<img class=\"galleryPhoto\" src=\""+iri2+"\"/>");
		}
		row_ct++;
	}); // each row
	
}


function loadFriends(data, path, viewContent, sourceViewId){
	var row_ct;
	
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						label2 = parseLabel(label2);
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		
		var friend = jQuery(document.createElement("div"));
		friend.attr("id", Math.random());
		friend.attr("class", "result_item friend");
		//friend.append("<a href=\"#\">" + label2 + "</a>");
		friend.append("<a href=\"#\" class=\"result_content\" title=\""+desanitize(iri2)+"\" onclick=\"javascript:getViewForLink('"+sourceViewId+"', '', '" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + "', 'properties');return false;\">" + label2 + "</a>");
		
		var span = jQuery(document.createElement("span"));
		span.attr("class", "accountType");
		span.attr("id", Math.random());
//		span.text("loading...");
		friend.append(span);
		jQuery.get(baseUrl + "?tid="+span.attr("id")+"&limit=25&offset=0&viewType=list&path=" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + DELIMIT_NODE + "foaf:holdsAccount" + DELIMIT_NODE + "foaf:accountServiceHomepage", {}, window["loadAccountType"], 'xml');		
		
		friend.click(
				function(){
					var hid = friend.attr("id");
					if (document.getElementById(hid).className.indexOf("result_multi_selected") >= 0 || document.getElementById(hid).className.indexOf("result_selected") >= 0) {
						//document.getElementById(hid).className = 'result_item friend';
					}
					if (!document.getElementById('v').value || document.getElementById('v').value.length <= 0) {
						//document.getElementById(hid).className = document.getElementById(hid).className + " result_multi_selected friend";
						animatedcollapse.show('tripleBarPane');
//						if(viewType == "list"){
//							document.getElementById('v').value = DELIMIT_IRI_START + iri + DELIMIT_IRI_END;
//							document.getElementById('vLabel').innerHTML += jQuery(document.getElementById(hid)).text();
//						}
					}
					else {
						//document.getElementById(hid).className = document.getElementById(hid).className + " result_multi_selected friend";
						animatedcollapse.show('tripleBarPane');
					}
						// only replace the value with the selection if this is the first time an item is selected
						// otherwise, concantenate the values
//						if(itemsSelected()) {
//							document.getElementById('v').value += DELIMIT_UNION + DELIMIT_IRI_START + iri + DELIMIT_IRI_END;
//							document.getElementById('vLabel').innerHTML += ((document.getElementById('vLabel').innerHTML) ? " && ": "") + jQuery(document.getElementById(hid)).text();
//						}
						if(isFromPropertyDefinition(sourceViewId)){
							setProperty(DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END, parseLabel(jQuery(document.getElementById(hid)).children('.result_content')[0].innerHTML));
						}
						else {
							setValue(DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END, parseLabel(jQuery(document.getElementById(hid)).children('.result_content')[0].innerHTML));
						}
					return false; // stop the page from scrolling each time the link is clicked
				}
		);
		
		
		
		viewContent.append(friend);
		
		// load the image
		jQuery.get(baseUrl + "?tid="+friend.attr("id")+"&limit=5&offset=0&viewType=list&path=" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + DELIMIT_NODE + "foaf:img", {}, setPathImgTarget, 'xml');
		row_ct++
		
	}); // each row
	// if this is a stream of data call
	// and if the last result was equal to the limit, then offer a more link to for a stream of data
	if(row_ct == limitInt){
	
	var offset = jQuery(data).find("metadata").attr("offset");
	var limit = jQuery(data).find("metadata").attr("limit");
	var total = 100;
	var offsetInt = parseInt(offset);
	var limitInt = parseInt(limit);
	var moreLink = jQuery(document.createElement("div"));
	moreLink.attr("class", "more");
	moreLink.attr("id", Math.random());
//	var removeScript = "jQuery('#" + moreLink.attr("id").replace(".", "\\\\.") + "').remove();";
	var loadingScript = "jQuery('#" + sourceViewId.replace(".", "\\\\.") + "').children('div.view_buttons').children('.result_index')[0].className = 'result_index_loading';"	
	loadingScript += "jQuery('#" + sourceViewId.replace(".", "\\\\.") + "').children('div.view_buttons').children('.result_index_loading')[0].innerHTML = '&nbsp;loading...&nbsp;';"	
	var nextSetContent = ((offsetInt + limitInt) + " - " + (offsetInt + (limitInt*2)) + " of "+total);
	var removeScript = "jQuery('#" + moreLink.attr("id").replace(".", "\\\\.") + "').html('"+nextSetContent+"');jQuery('#" + moreLink.attr("id").replace(".", "\\\\.") + "').attr('class', 'moreLabel');";
	var targetId = viewContent.parent().attr("id");
	moreLink.append("<a title=\"more\" class=\"moreLink\" href=\"#\" onclick=\"javascript:"+loadingScript+removeScript+"reloadView('" + baseUrl + "?smid="+targetId+"&tid="+targetId+"&reload=true&viewType=list&path=" + path + "&offset=" + (offsetInt + limitInt) + "&limit=" + limit + "&append=true');return false;\">more</a>");	
	viewContent.append(moreLink);
	
	}
}

function setPathImgTarget(data, path, viewContent, sourceViewId){
//	var ret = new Array(4);
	var found;
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		if(found) return;
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		var tid = jQuery(data).find("metadata").attr("tid");
		var targetNode = jQuery(document.getElementById(tid));
		targetNode.prepend("<img class=\"friend\" src=\""+iri2+"\" class=\"full\" onclick=\"javascript:getViewForLink('', '', '" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + "', 'properties')\"/>");
		found = true;
		
	}); // each row\

	if (found) return;
	// return default image
	var iri2 = "http://shanghaiist.com/attachments/shang_kenneth/anonymous-icon_restrict_height_110.jpg";
	var tid = jQuery(data).find("metadata").attr("tid");
	var targetNode = jQuery(document.getElementById(tid));
	targetNode.prepend("<img class=\"friend\" src=\""+iri2+"\" class=\"full\" onclick=\"javascript:getViewForLink('', '', '" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + "', 'properties')\"/>");
	
//	ret[0] = shortform2;
//	ret[1] = label2;
//	ret[2] = iri2;
//	ret[3] = datatype2;
//	return ret;
}

function setResultCategory(data){
//	var ret = new Array(4);
	var path = jQuery(data).find("metadata").attr("path");
	var smid = jQuery(data).find("metadata").attr("smid");
	if(!smid) return false;
	smid = "#"+smid.replace(".", "\\.");
	var src = jQuery(smid);
	if(!src) return false;
	
	// TODO: for some reason, the smid isn't being passed to the child view when a category label is clicked
	// when this is  the case, simply do not print the category label in the child view
	// the category labels in the child view are most times redundant anyway
	if(!src.parent().siblings("div.dock_header").children()[2]) return;
	var title = src.parent().siblings("div.dock_header").children()[2].innerHTML;
	var found;
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		if(found) return;
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		label2 = parseLabel(label2);
		label2 = capitalize(label2);
		var tid = jQuery(data).find("metadata").attr("tid");
		var targetNode = jQuery(document.getElementById(tid));
		targetNode.prepend("<span class=\"category\"><a title=\""+iri2+"\" href=\"#\" onclick=\"javascript:getViewForLink('"+jQuery(data).find("metadata").attr("smid")+"', '"+tid+"', '" + title + DELIMIT_NODE + "rdf:type" + DELIMIT_EQ + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + "', 'list');return false;\">" + label2 + "</a></span>");
		
		// when a link is clicked, don't propagate the click event up to the clickable div
		targetNode.children().children().click(function(event){
		    event.stopImmediatePropagation();
		});
	
		found = true;
	}); // each row
	
	
//	ret[0] = shortform2;
//	ret[1] = label2;
//	ret[2] = iri2;
//	ret[3] = datatype2;
//	return ret;
}


function loadCalendar(data, path, viewContent, sourceViewId){
	var toggleAdded;
	
	// gallery housekeeping stuff	
	
	var cal = jQuery(document.createElement("div"));
	cal.attr("id", Math.random());
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		var date = jQuery(document.createElement("div"));
		var pretty = jQuery(document.createElement("span"));
		var iso8601Format = dateFormat(new Date(label2), "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'");
		pretty.attr("title", iso8601Format);
		pretty.text(" (" + label2 + ")");
		date.append(pretty);		
		pretty.humaneDates();		
		var raw = jQuery(document.createElement("span"));
		raw.text(" (" + label2 + ")");
		date.append(raw);
		cal.append(date);
	}); // each row
	
	viewContent.append(cal);
//	cal.fullCalendar({
//	    events: [
//	             {
//	                 title: 'Event1',
//	                 start: '2011-04-04'
//	             },
//	             {
//	                 title: 'Event2',
//	                 start: '2011-05-05'
//	             }
//	             // etc...
//	         ],
//	         color: 'yellow',   // an option!
//	         textColor: 'black' // an option!
//	     });
}

function loadWebpage(data, path, viewContent, sourceViewId){
	var toggleAdded;
	
	
	// load multiple results as results list
	if (jQuery(data).find("[nodeName=fct:row]").length > 1) {
		loadResults(data, path, viewContent, sourceViewId);
		return;
	} 
	// if no properties were found for the path, let the path be the iri by default
	if (jQuery(data).find("[nodeName=fct:row]").length <= 0) {
		var browser = jQuery(document.createElement("iframe"));
		browser.attr("id", Math.random());
		browser.attr("height", "1400px");
		browser.attr("width", "100%");
		path = unescape(desanitize(path));
		if(path.indexOf("youtube") >= 0){
			if(path.indexOf("?v=") >= 0){
				path = path.substring(path.indexOf("?v=") + 3);
				if(path.indexOf("&") >= 0) path = path.substring(0, path.indexOf("&"));			
				if(path.indexOf(DELIMIT_IRI_END) >= 0) path = path.substring(0, path.indexOf(DELIMIT_IRI_END));			
			}
			path = "http://www.youtube.com/embed/" + path;
			browser.attr("height", "345");
//			browser.attr("width", "420");
		}
		
		// we must assume the path is a single IRI wrapped in DELIMIT_IRI
		if(startsWith(path, DELIMIT_IRI_START) && endsWith(path, DELIMIT_IRI_END)) path = path.substring(1, path.length - 1);
		browser.attr("src", path);
		var targetId = viewContent.parent().attr("id");
		// when dot char appears in id, jQuery needs it to be replaced literally by two back slashes and a dot '\\.'
		// since this is being passed into javascript, we need to preserve the two backslashes by escaping them
		targetId = targetId.replace(".", "\\\\.");
		browser.attr("onLoad", "javascript:update('"+targetId+"', '"+browser.attr("id")+"');");
		viewContent.append(browser);
		return;
	}

	
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
	// insert the iframe
		
		
		
	if(iri2.indexOf("youtube") >= 0){
		if(iri2.indexOf("?v=") >= 0){
			iri2 = iri2.substring(iri2.indexOf("?v=") + 3);
			if(iri2.indexOf("&") >= 0) iri2 = iri2.substring(0, iri2.indexOf("&"));			
			if(iri2.indexOf(DELIMIT_IRI_END) >= 0) iri2 = iri2.substring(0, iri2.indexOf(DELIMIT_IRI_END));			
		}
		iri2 = "http://www.youtube.com/embed/" + iri2;
		browser.attr("height", "345");
//		browser.attr("width", "420");
	}
		
	var browser = jQuery(document.createElement("iframe"));
	browser.attr("id", Math.random());
	browser.attr("height", "100%");
	browser.attr("width", "100%");
	browser.attr("src", iri2);
	var targetId = viewContent.parent().attr("id");
	// when dot char appears in id, jQuery needs it to be replaced literally by two back slashes and a dot '\\.'
	// since this is being passed into javascript, we need to preserve the two backslashes by escaping them
	targetId = targetId.replace(".", "\\\\.");
	browser.attr("onLoad", "javascript:update('"+targetId+"', '"+browser.attr("id")+"');");
	
	viewContent.append(browser);
//		browser.append("<img class=\"galleryPhoto\" src=\""+iri2+"\" class=\"full\" onclick=\"javascript:getViewForLink('', '', '" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + "', 'properties')\"/>");
	}); // each row
	
}

function loadMap(data, path, viewContent, sourceViewId){
	
}

function loadBook(data, path, viewContent, sourceViewId){
	var book = jQuery(document.createElement("div"));
	var bookid = Math.random();
	book.attr("id", bookid);
	book.css("height", "800px");
	book.css("width", "100%");	
	viewContent.append(book);
	var label2;
	var isbn_array = new Array();
	var row_ct = 0;
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
	    var isbn = label2.split(" ");
	    label2 = (isbn[0].toUpperCase() == "ISBN") ? "ISBN:" + isbn[1]: "ISBN:" + isbn[0];
	    while (label2.indexOf("-") >= 0) label2 = label2.replace("-", "");
	    isbn_array[row_ct] = label2;
	    row_ct++;
	}); // each row

    var viewer = new google.books.DefaultViewer(document.getElementById(bookid));
    viewer.load(isbn_array, 
    		// if the preview is not found
    		function(){
    			book.remove();
    			viewContent.append("<div class=\"error\">No Google Books preview found</div>");
    		}
    );
}

function loadBasicActions(data, path, viewContent, sourceViewId){
	if (jQuery(data).find("[nodeName=fct:row]").length > 1) {
		loadResults(data, path, viewContent, sourceViewId);
		return;
	}
	var actions = jQuery(document.createElement("span"));
	actions.append("<a class=\"action\" href=\"#\">know</a>");
	actions.append("<a class=\"action\" href=\"#\">location</a>");
	actions.append("<a class=\"action\" href=\"#\">parent</a>");
	actions.append("<a class=\"action\" href=\"#\">edit</a>");
	actions.append("<a class=\"action\" href=\"#\">delete</a>");
	viewContent.append(actions);
}

function doCreateNote(subject){
	var webid = document.getElementById('webid').value;
	var rand = Math.random();
	var q = "";
	if(subject && subject.length && subject.length > 0) {
		while(subject.indexOf(DELIMIT_IRI_START) >= 0 || subject.indexOf(DELIMIT_IRI_END) >= 0){
			subject = subject.replace(DELIMIT_IRI_START, "<");
			subject = subject.replace(DELIMIT_IRI_END, ">");
		}
		q += subject+" <http://www.w3.org/2000/01/rdf-schema#comment> <"+webid+"/iri/"+rand+">. ";
	}
	q += "<"+webid+"/iri/"+rand+"> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://purl.org/ontology/bibo/Note>. ";
	q += "<"+webid+"/iri/"+rand+"> <http://xmlns.com/foaf/0.1/maker> <"+webid+">. ";
	q += "<"+webid+"/iri/"+rand+"> <http://purl.org/dc/terms/created> \""+new Date().toUTCString()+"\". ";
	
	q = "insert into graph <"+webid+"/fact/> { " + desanitize(q) + " }";
	jQuery.get(updateUrl + "?query=" + escape( q ), {}, function(){}, 'xml');
	animatedcollapse.show('tripleBarPane');
	unselectAllItems();
	setSubject("{" + webid+"/iri/"+rand + "}", rand+"");
	setProperty( "{http://www.w3.org/2000/01/rdf-schema#label}", "label");
	setValue("click to edit note", "click to edit note");
	
}

function hideSearchIn(){
	var searchIn = jQuery(document.getElementById("searchIn"));
	searchIn.css("display", "none");
	clearSearchIn();
}

function clearSearchIn(){
	var searchIn = jQuery(document.getElementById("searchIn"));
	document.getElementById("searchSuffix").value = '';
	searchIn.text("");
	document.getElementById("searchTarget").value = '';
}

function getSearchSuffix(){
	return document.getElementById("searchSuffix").value;
}

function showSearchIn(suffix, suffixLabel, id){
	var searchIn = jQuery(document.getElementById("searchIn"));
	searchIn.css("display", "block");
	searchIn.append( "Search in: <i>" + suffixLabel + "</i><a href=\"#\"  class=\"tripleBarAction\" onclick=\"hideSearchIn();\">close</a>");
	document.getElementById("searchSuffix").value = suffix;
	document.getElementById("searchTarget").value = id;
}

function makeTags(element, path, viewContent){
	element.click(
			function(){
				// the link should point to the q:value of the Bookmark object
				getViewForLink('', '', path + DELIMIT_NODE + "foaf:primaryTopic", 'list');
				// when a link is clicked, don't propagate the click event up to the clickable div
//			    event.stopImmediatePropagation();
				return false;
			}
	);
}

function makeSearch(element, path, id){
	// whenever the root text node is bound, here are the rules:
	// 1) the next node must NOT express a criteria (which uses DELIMIT_EQ), because 
	//	  no futher specification is possible one you've pointed at something using its IRI
	// 2) this means the node proceeding a bound text root node must be a nonbound property
	// 3) if we wish to "search within" the result set of a path, any bound text root node must
	//    be "pushed" off the root node so that we can use the root to hold our search tex, while
	//    at the same time preserving the semantics of the path
	// 4) knowing that the node following the bound text root node must not be a DELIMIT_EQ node, we can
	// 		a. bound the root IRI to the proceeding node, and
	//		b. reverse the direction of that proceeding node
	//	  this will give us the same semantics as a bound root text node

	// otherwise, if the root text node is not bound, then just strip it off to make room for a new text node
	
	var suffix = unescape( desanitize(path) );
	var suffixLabel;
	if(suffix.indexOf(DELIMIT_NODE) >= 0) {
		var prefix = suffix.substring(0, suffix.indexOf(DELIMIT_NODE));
		suffix = suffix.substring(suffix.indexOf(DELIMIT_NODE) + 1);
		if(startsWith(prefix, DELIMIT_IRI_START) && endsWith(prefix, DELIMIT_IRI_END)){
			var nodes = suffix.split(DELIMIT_NODE);
			var node_ct = 0;
			suffix = '';
			while(node_ct < nodes.length){
				var node = nodes[node_ct];
				if(node_ct == 0){
					if(startsWith(node, DELIMIT_REVERSE)){
						node = node.substring(1) + DELIMIT_EQ + prefix;
					}
					else node = DELIMIT_REVERSE + node + DELIMIT_EQ + prefix;
				}
				suffix += ((node_ct > 0) ? DELIMIT_NODE : "") + node;
				node_ct++;
			}
		}
		suffixLabel = suffix;
		suffix = DELIMIT_NODE + suffix;
	}
	else {
		suffixLabel = suffix;
		suffix = "+" + suffix;
	}
	element.click(function(){clearSearchIn();eval("showSearchIn(suffix, suffixLabel, id);");});
}

function loadNotes(data, path, viewContent, sourceViewId){
	var isTextSearch = jQuery(data).find("metadata").attr("isTextSearch");
	var note = jQuery(document.createElement("div"));
	note.attr("class", "noteActionBar");
	var span = jQuery(document.createElement("span"));
	span.attr("class", "action");
	span.text("write something");
	span.click(doCreateNote);
	note.append(span);
	
//	var span = jQuery(document.createElement("span"));
//	span.attr("class", "action");
//	span.text("tags");
//	makeTags(span, path)
//	note.append(span);	

//	span = jQuery(document.createElement("span"));
//	span.attr("class", "action");
//	span.text("search");
//	makeSearch(span, path);
//	note.append(span);	
	
	viewContent.append(note);
	
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		note = jQuery(document.createElement("div"));
		note.attr("class", "note");
		note.attr("id", Math.random());
		note.html("-&nbsp;" + label2);
		note.click(
				function(){
					var hid = note.attr("id");
					if (document.getElementById(hid).className.indexOf("result_multi_selected") >= 0 || document.getElementById(hid).className.indexOf("result_selected") >= 0) {
						//document.getElementById(hid).className = 'result_item friend';
					}
					if (!document.getElementById('v').value || document.getElementById('v').value.length <= 0) {
						//document.getElementById(hid).className = document.getElementById(hid).className + " result_multi_selected friend";
						animatedcollapse.show('tripleBarPane');
//						if(viewType == "list"){
//							document.getElementById('v').value = DELIMIT_IRI_START + iri + DELIMIT_IRI_END;
//							document.getElementById('vLabel').innerHTML += jQuery(document.getElementById(hid)).text();
//						}
					}
					else {
						//document.getElementById(hid).className = document.getElementById(hid).className + " result_multi_selected friend";
						animatedcollapse.show('tripleBarPane');
					}
					setValue(DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END, "Note - " + label2);
					return false; // stop the page from scrolling each time the link is clicked
				}
		);
		viewContent.append(note);
		if(isTextSearch) jQuery.get(baseUrl + "?tid="+note.attr("id")+"&limit=25&offset=0&viewType=text&path=" + sanitize( escape( path ) ) + DELIMIT_NODE + "rdfs:label" + DELIMIT_EQ + sanitize(escape(label2)), {}, window["loadTextSearchNote"], 'xml');
	}); // each row	
	viewContent.css("background-image", "url(img/notebg.gif)");
	viewContent.css("min-height", "200px");
}

function loadTextSearchNote(data){
	var tid = jQuery(data).find("metadata").attr("tid");
	var shortform2, trank, erank, highlighted, label2, iri2, datatype2;
	var j = 0;
	// gather the row data
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		jQuery(this).find("[nodeName=fct:column]").each(function() {
		
			if (j == 2) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 0) {
					trank = jQuery(this).text();
				}
				else
					if (j == 1) {
						erank = jQuery(this).text();
					}
					else
						if (j == 4) {
							highlighted = jQuery(this).text();
						}
						else
							if (j == 3) {
								label2 = jQuery(this).text();
								if (!label2) {
									label2 = iri2; // sometimes the object is a string literal, not an iri
								}
							}
	
			j++;
		}); // each column
	}); // each row
	if(highlighted){
		
		// for some reason, the API returns the snippet with an extra period appended, strip the extra period before processing
		highlighted = highlighted.substring(0, highlighted.length - 1);
		
		var targetNode = jQuery(document.getElementById(tid));
		var raw = targetNode.text();
		// BUG: results sometimes send back entities, and its difficult to
		// decode them
		if (highlighted.indexOf("&gt;") > 0 || highlighted.indexOf("&lt;") > 0) {
			highlighted = highlighted.replace("/&gt;/gi", ">");
			highlighted = highlighted.replace("/&lt;/gi", "<");
			highlighted = targetNode.html(highlighted).text();
			var stripped = highlighted;
			while(stripped.indexOf("<b>") >= 0){
				stripped = stripped.replace("<b>", "");
			}
			while(stripped.indexOf("</b>") >= 0){
				stripped = stripped.replace("</b>", "");
			}
//			highlighted = raw.replace(stripped, highlighted);
		}
		targetNode.html(highlighted);
	}
}

function loadBookmark(data, path, viewContent, sourceViewId){
	viewContent.attr("class", "bm_list");
	
	var bm = jQuery(document.createElement("div"));
	bm.attr("class", "bookmarkActionBar");
	bm.attr("id", Math.random());
	
//	var span = jQuery(document.createElement("span"));
//	span.attr("class", "action");
//	span.text("tags");
//	makeTags(span, path, viewContent);
//	bm.append(span);
	
//	span = jQuery(document.createElement("span"));
//	span.attr("class", "action");
//	span.text("search");
//	makeSearch(span, path);
//	bm.append(span);	
	
	viewContent.append(bm);
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		
		var post = jQuery(document.createElement("div"));
		post.attr("class", "bm_post");
		post.attr("id", Math.random());
		viewContent.append(post);
		
		
		// set up dates
		var div = jQuery(document.createElement("div"));
		div.attr("class", "bm_date");
		div.attr("id", Math.random());
		var cleaned = desanitize(label2);
		cleaned = unescape(cleaned);
		var dateSpanId = Math.random();
		div.append("<span class=\"pretty\" id=\"pretty"+dateSpanId+"\">&nbsp;</span>");		
//		div.append("<span class=\"raw\" id=\"raw"+dateSpanId+"\">&nbsp;</span>");		
		post.append(div);
		jQuery.get(baseUrl + "?tid="+dateSpanId+"&limit=25&offset=0&viewType=list&path=" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + DELIMIT_NODE + "dcterms:created", {}, window["loadDate"], 'xml');
		
		
		// set up the div item to the right of the dates
		var bm_item = jQuery(document.createElement("div"));
		bm_item.attr("class", "bm_item");
		post.append(bm_item);
		
		// set up main result item link
		div = jQuery(document.createElement("div"));
		var linkId = Math.random();
		div.append("<a href=\"#\" id=\""+linkId+"\" class=\"result_content\" title=\""+cleaned+"\">loading...</a>");
		var a = jQuery(document.createElement("a"));
		a.attr("title", desanitize(iri2));
		a.attr("class", "bm_action");
		a.attr("href", "#");
		a.text("edit");
		a.click(function(e){
			getViewForLink(sourceViewId, '', DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END, 'properties');
			e.stopImmediatePropagation();
			return false;
		});
		div.append(a);
		
		var commentdId = Math.random();
		jQuery.get(baseUrl + "?tid="+linkId+"&limit=25&offset=0&viewType=list&path=" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + DELIMIT_NODE + DELIMIT_IRI_START + "http://ns.qanvas.org/value" + DELIMIT_IRI_END, {}, window["loadBookmarkValue"], 'xml');
		bm_item.append(div);

		// set up comments
		div = jQuery(document.createElement("ul"));
		div.attr("id", commentdId);
		div.attr("class", "comments hide");
		jQuery.get(baseUrl + "?tid="+commentdId+"&limit=25&offset=0&viewType=list&path=" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + DELIMIT_NODE + "rdfs:comment", {}, window["loadComments"], 'xml');
		bm_item.append(div);
		
		// set up tags
		var tagdisplay = jQuery(document.createElement("div"));
		tagdisplay.attr("class", "bm_tagdisplay");
		bm_item.append(tagdisplay);
		
		var tagsId = Math.random();
		div = jQuery(document.createElement("div"));
		div.attr("class", "bm_tags");
		div.attr("id", tagsId);
		jQuery.get(baseUrl + "?tid="+tagsId+"&limit=25&offset=0&viewType=list&path=" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + DELIMIT_NODE + "foaf:primaryTopic", {}, window["loadTags"], 'xml');
		tagdisplay.append(div);
		
		post.click(
				function(){
					var hid = linkId;
					if (document.getElementById(hid).className.indexOf("result_multi_selected") >= 0 || document.getElementById(hid).className.indexOf("result_selected") >= 0) {
						//document.getElementById(hid).className = 'result_item friend';
					}
					if (!document.getElementById('v').value || document.getElementById('v').value.length <= 0) {
						//document.getElementById(hid).className = document.getElementById(hid).className + " result_multi_selected friend";
						animatedcollapse.show('tripleBarPane');
//						if(viewType == "list"){
//							document.getElementById('v').value = DELIMIT_IRI_START + iri + DELIMIT_IRI_END;
//							document.getElementById('vLabel').innerHTML += jQuery(document.getElementById(hid)).text();
//						}
					}
					else {
						//document.getElementById(hid).className = document.getElementById(hid).className + " result_multi_selected friend";
						animatedcollapse.show('tripleBarPane');
					}
						// only replace the value with the selection if this is the first time an item is selected
						// otherwise, concantenate the values
//						if(itemsSelected()) {
//							document.getElementById('v').value += DELIMIT_UNION + DELIMIT_IRI_START + iri + DELIMIT_IRI_END;
//							document.getElementById('vLabel').innerHTML += ((document.getElementById('vLabel').innerHTML) ? " && ": "") + jQuery(document.getElementById(hid)).text();
//						}
						if(isFromPropertyDefinition(sourceViewId)){
							setProperty(DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END, parseLabel(cleaned));
						}
						else {
							setValue(DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END, parseLabel(cleaned));
						}
					return false; // stop the page from scrolling each time the link is clicked
				}
		);
	}); // each row	
}


function loadBookmarkValue(data) {
	var tid = jQuery(data).find("metadata").attr("tid");
	var smid = jQuery(data).find("metadata").attr("tid");
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		var targetNode = jQuery(document.getElementById(tid));
		var title = targetNode.attr("title");
		targetNode.text(title);
		var cleaned = desanitize(label2);
		cleaned = unescape(cleaned);
		title = targetNode.attr("title", cleaned);
		targetNode.click(
				function(){
					// the link should point to the q:value of the Bookmark object
					getViewForLink(targetNode.parent().parent().attr("id"), '', label2, 'list');
					return false;
				}
		);
	}); // each row	
}

function loadDate(data) {
	var tid = jQuery(data).find("metadata").attr("tid");
	var smid = jQuery(data).find("metadata").attr("tid");
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		var targetNode = jQuery(document.getElementById("pretty"+tid));
		
		
		var iso8601Format = dateFormat(new Date(label2), "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'");
		targetNode.attr("title", iso8601Format);
		targetNode.text(label2);
		targetNode.humaneDates();
		targetNode.text(targetNode.text().toUpperCase());
		
		targetNode = jQuery(document.getElementById("raw"+tid));
		var datelabel = dateFormat(new Date(label2), "dd mmm yy");
//		targetNode.text(datelabel.toUpperCase());
	}); // each row	
}

function loadComments(data) {
	var tid = jQuery(data).find("metadata").attr("tid");
	var smid = jQuery(data).find("metadata").attr("tid");
	var row_ct = 0;
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		var targetNode = jQuery(document.getElementById(tid));
		var comment = jQuery(document.createElement("li"));
		comment.attr("class", "comment");
		comment.html(label2);
		targetNode.append(comment);
		if(row_ct == 0){
			var a = jQuery(document.createElement("a"));
			a.attr("title", "show notes");
			a.attr("class", "bm_action");
			a.attr("id", "src"+tid);
			a.attr("href", "#");
			a.text("notes");
			a.click(function(e){
				toggleValues(tid, 'comments', 'notes');
				e.stopImmediatePropagation();
				return false;
			});
			jQuery(targetNode.siblings()[0]).append(a);
		}
		
		row_ct++;
	}); // each row	
}

function loadTags(data) {
	var tid = jQuery(data).find("metadata").attr("tid");
	var smid = jQuery(data).find("metadata").attr("tid");
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		var targetNode = jQuery(document.getElementById(tid));
		var viewContent =  targetNode.parents(".dock_content");
		var headerTitle = viewContent.siblings(".dock_header").children()[2].innerHTML;
		var tag = jQuery(document.createElement("span"));
		tag.attr("class", "tag");
		tag.text(label2);
		tag.click(
				function(){
					// the link should point to the q:value of the Bookmark object
					getViewForLink(viewContent.attr("id"), '', headerTitle + DELIMIT_NODE + "foaf:primaryTopic" + DELIMIT_EQ + label2, 'list');
					return false;
				}
		);
		targetNode.append(tag);
	}); // each row	
}

function loadAccountType(data) {
	var tid = jQuery(data).find("metadata").attr("tid");
	var smid = jQuery(data).find("metadata").attr("tid");
	jQuery(data).find("[nodeName=fct:row]").each(function() {
		var shortform2, label2, iri2, datatype2;
		var j = 0;
		// gather the row data
		jQuery(this).find("[nodeName=fct:column]").each(function() {
			if (j == 0) {
				shortform2 = jQuery(this).attr("shortform");
				datatype2 = jQuery(this).attr("datatype");
				iri2 = jQuery(this).text();
				// escape any ' char in the path
				iri2 = sanitize(iri2);
			}
			else
				if (j == 1) {
					label2 = jQuery(this).text();
					if (!label2) {
						label2 = iri2; // sometimes the object is a string
						// literal, not an iri
					}
				}
			j++;
		}); // each column
		var targetNode = jQuery(document.getElementById(tid));
		targetNode.text(label2);
	}); // each row	
}

//loadBookmark(data, path, viewContent, sourceViewId){
//	var bm = jQuery(document.createElement("div"));
//	bm.attr("class", "noteActionBar");
//	bm.append("<span class=\"action\">take a note</span>");
//	bm.click(doCreateNote);
//	viewContent.append(bm);
//	jQuery(data).find("[nodeName=fct:row]").each(function() {
//		var shortform2, label2, iri2, datatype2;
//		var j = 0;
//		// gather the row data
//		jQuery(this).find("[nodeName=fct:column]").each(function() {
//			if (j == 0) {
//				shortform2 = jQuery(this).attr("shortform");
//				datatype2 = jQuery(this).attr("datatype");
//				iri2 = jQuery(this).text();
//				// escape any ' char in the path
//				iri2 = sanitize(iri2);
//			}
//			else
//				if (j == 1) {
//					label2 = jQuery(this).text();
//					if (!label2) {
//						label2 = iri2; // sometimes the object is a string
//						// literal, not an iri
//					}
//				}
//			j++;
//		}); // each column
//		bm = jQuery(document.createElement("div"));
//		bm.attr("class", "note");
//		bm.html("&nbsp;&nbsp;&nbsp;-&nbsp;" + label2);
//		bm.click(
//				function(){
//					jQuery.get(baseUrl + "?tid="+bm.attr("id")+"&limit=5&offset=0&viewType=list&path=" + DELIMIT_IRI_START + iri2 + DELIMIT_IRI_END + DELIMIT_NODE + "q:value", {}, function(){
//						
//						
//						getViewForLink(sourceModuleId, '', path);						
//						
//						
//					}, 'xml');
//				}
//		);
//		viewContent.append(bm);
//	}); // each row	
//	viewContent.css("background-image", "url(img/notebg.gif)");
//	viewContent.css("min-height", "500px");
//}


function update(targetId, browserId){
//	jQuery("#"+targetId).parent().parent('div.dock_window').children('div.dock_header').children()[2].innerHTML = document.getElementById(browserId).contentWindow.location.href;
}

function drag(){
	var person = Dom.create("div");
	var resultsList = Dom.create("div");
	gd.addTarget(resultsList);
	gr.addSource(person, personIsMoving, peopleDropHandler);
}

function personIsMoving(clone){
	
}

function peopleDropHandler(person, x, y) { 
	alert("Success!");
}